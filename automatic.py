import os
import time
import shutil
import git
import threading
import datetime
import json
import re
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
import traceback

# X√°c ƒë·ªãnh th∆∞ m·ª•c g·ªëc c·ªßa d·ª± √°n thay v√¨ s·ª≠ d·ª•ng th∆∞ m·ª•c hi·ªán t·∫°i
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
WATCH_DIR = SCRIPT_DIR  # Theo d√µi th∆∞ m·ª•c ch·ª©a script n√†y
# Th√™m c√°c ƒëi·ªÅu ki·ªán h·ª£p l·ªá ƒë·ªÉ tr√°nh s·ª± ki·ªán l·∫∑p
COOLDOWN_PERIOD = 1  # Th·ªùi gian ch·ªù gi·ªØa c√°c s·ª± ki·ªán (gi√¢y)
last_modified_time = {}  # Dictionary ƒë·ªÉ theo d√µi th·ªùi gian s·ª≠a ƒë·ªïi cu·ªëi c√πng
STATUS_MESSAGE_DURATION = 5  # Th·ªùi gian hi·ªÉn th·ªã th√¥ng b√°o (gi√¢y)

# T·∫°o file log cho user theo d√µi l·ªãch s·ª≠
LOG_FILE = os.path.join(WATCH_DIR, "autosync_log.json")

# Kh·ªüi t·∫°o log n·∫øu ch∆∞a t·ªìn t·∫°i
if not os.path.exists(LOG_FILE):
    with open(LOG_FILE, "w", encoding="utf-8") as f:
        json.dump([], f)

def log_operation(file_path, operation_type, status, message):
    """Ghi log ho·∫°t ƒë·ªông v√†o file json"""
    try:
        # ƒê·ªçc log hi·ªán t·∫°i
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            try:
                logs = json.load(f)
            except json.JSONDecodeError:
                logs = []
        
        # Th√™m b·∫£n ghi m·ªõi
        logs.append({
            "timestamp": datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "file": file_path,
            "operation": operation_type,
            "status": status,
            "message": message
        })
        
        # Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng log (gi·ªØ 100 b·∫£n ghi g·∫ßn nh·∫•t)
        if len(logs) > 100:
            logs = logs[-100:]
            
        # L∆∞u log
        with open(LOG_FILE, "w", encoding="utf-8") as f:
            json.dump(logs, f, indent=2)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi ghi log: {e}")

def read_first_comment(file_path):
    """ƒê·ªçc d√≤ng ƒë·∫ßu ti√™n ƒë·ªÉ l·∫•y ƒë∆∞·ªùng d·∫´n ƒë√≠ch"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            first_line = f.readline().strip()
            # H·ªó tr·ª£ c·∫£ comment Python v√† c√°c ng√¥n ng·ªØ kh√°c
            if first_line.startswith("//"):
                return first_line[2:].strip()  # B·ªè "//" ·ªü ƒë·∫ßu
            elif first_line.startswith("#"):
                return first_line[1:].strip()  # B·ªè "#" ·ªü ƒë·∫ßu
    except UnicodeDecodeError:
        # Th·ª≠ v·ªõi encoding kh√°c n·∫øu utf-8 th·∫•t b·∫°i
        try:
            with open(file_path, "r", encoding="latin-1") as f:
                first_line = f.readline().strip()
                if first_line.startswith("//"):
                    return first_line[2:].strip()  # S·ª≠a l·ªói t·ª´ trip() sang strip()
                elif first_line.startswith("#"):
                    return first_line[1:].strip()
        except Exception as e:
            add_status_message(file_path, f"‚ö†Ô∏è L·ªói ƒë·ªçc file v·ªõi encoding kh√°c: {e}", "error")
            print(f"‚ö†Ô∏è L·ªói ƒë·ªçc file {file_path} v·ªõi encoding kh√°c: {e}")
    except Exception as e:
        add_status_message(file_path, f"‚ö†Ô∏è L·ªói ƒë·ªçc file: {e}", "error")
        print(f"‚ö†Ô∏è L·ªói ƒë·ªçc file {file_path}: {e}")
    return None

def remove_line(file_path, line_to_remove):
    """X√≥a m·ªôt d√≤ng c·ª• th·ªÉ trong file"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        with open(file_path, "w", encoding="utf-8") as f:
            # C·∫£i thi·ªán so kh·ªõp b·∫±ng c√°ch lo·∫°i b·ªè kho·∫£ng tr·∫Øng
            new_lines = [line for line in lines if line.strip() != line_to_remove.strip()]
            f.writelines(new_lines)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x√≥a d√≤ng '{line_to_remove}': {e}")

def remove_section_markers(file_path):
    """X√≥a c√°c d·∫•u hi·ªáu ph·∫ßn tr·∫°ng th√°i trong file"""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
            
        # T√¨m v√† x√≥a ph·∫ßn STATUS SECTION
        start_idx = -1
        end_idx = -1
        
        for i, line in enumerate(lines):
            if line.strip() == "/* AUTO-SYNC STATUS START */":
                start_idx = i
            elif line.strip() == "/* AUTO-SYNC STATUS END */":
                end_idx = i
                
        # N·∫øu t√¨m th·∫•y c·∫£ ƒëi·ªÉm b·∫Øt ƒë·∫ßu v√† k·∫øt th√∫c, x√≥a ph·∫ßn n√†y
        if start_idx != -1 and end_idx != -1 and start_idx < end_idx:
            new_lines = lines[:start_idx] + lines[end_idx+1:]
            with open(file_path, "w", encoding="utf-8") as f:
                f.writelines(new_lines)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x√≥a section markers: {e}")

def clean_file(file_path):
    """X√≥a l·ªánh v√† th√¥ng b√°o tr·∫°ng th√°i kh·ªèi file"""
    try:
        # X√≥a ph·∫ßn tr·∫°ng th√°i
        remove_section_markers(file_path)
        
        # X√≥a t·∫•t c·∫£ c√°c lo·∫°i l·ªánh
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()
        
        # Danh s√°ch c√°c l·ªánh c·∫ßn x√≥a
        commands = ["//sync", "#sync", 
                    "//commit now", "#commit now", 
                    "//status", "#status"]
        
        # Th√™m c√°c m·∫´u l·ªánh commit m·ªõi v√†o danh s√°ch c·∫ßn x√≥a
        commit_patterns = [
            r"//commit\.", r"#commit\.",
            r"//commit\s+[a-zA-Z0-9_\-\/]+\.", r"#commit\s+[a-zA-Z0-9_\-\/]+\."
        ]
        
        # L·ªçc c√°c d√≤ng kh√¥ng ch·ª©a l·ªánh
        new_lines = []
        for line in lines:
            should_keep = True
            # Ki·ªÉm tra c√°c l·ªánh c·ª• th·ªÉ
            for cmd in commands:
                if cmd in line:
                    should_keep = False
                    break
            
            # Ki·ªÉm tra c√°c m·∫´u l·ªánh commit m·ªõi
            if should_keep:
                for pattern in commit_patterns:
                    if re.search(pattern, line):
                        should_keep = False
                        break
            
            if should_keep:
                new_lines.append(line)
        
        # Ghi l·∫°i n·ªôi dung file sau khi x√≥a l·ªánh
        with open(file_path, "w", encoding="utf-8") as f:
            f.writelines(new_lines)
            
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi l√†m s·∫°ch file {file_path}: {e}")

def add_status_message(file_path, message, status_type="info"):
    """Th√™m th√¥ng b√°o tr·∫°ng th√°i v√†o file"""
    try:
        # X√≥a section marker c≈© n·∫øu c√≥
        remove_section_markers(file_path)
        
        with open(file_path, "r", encoding="utf-8") as f:
            content = f.readlines()
            
        # Th√™m th√¥ng b√°o v√†o cu·ªëi file v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
        timestamp = datetime.datetime.now().strftime("%H:%M:%S %d/%m/%Y")
        
        # Ch·ªçn icon ph√π h·ª£p v·ªõi lo·∫°i tr·∫°ng th√°i
        icon = "‚ÑπÔ∏è" if status_type == "info" else "‚úÖ" if status_type == "success" else "‚ö†Ô∏è"
        
        status_section = [
            "\n/* AUTO-SYNC STATUS START */\n",
            f"/* {icon} {message} */\n",
            f"/* ‚è±Ô∏è Th·ªùi gian: {timestamp} */\n",
            "/* AUTO-SYNC STATUS END */\n"
        ]
        
        with open(file_path, "w", encoding="utf-8") as f:
            f.writelines(content + status_section)
            
        # Log ho·∫°t ƒë·ªông
        log_operation(file_path, "status_update", status_type, message)
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi th√™m th√¥ng b√°o tr·∫°ng th√°i: {e}")
        traceback.print_exc()

def get_commit_message():
    """T·∫°o commit message v·ªõi timestamp"""
    return f"Auto commit at {datetime.datetime.now().strftime('%H:%M:%S %d/%m/%Y')}"

def sync_file(file_path):
    """ƒê·ªìng b·ªô file ƒë·∫øn v·ªã tr√≠ ƒë√≠ch"""
    dest_path = read_first_comment(file_path)
    if not dest_path:
        message = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n ƒë√≠ch trong file"
        add_status_message(file_path, message, "error")
        print(f"{message}: {file_path}")
        return False
    
    # Ki·ªÉm tra xem ƒë∆∞·ªùng d·∫´n ƒë√≠ch c√≥ ph·∫£i ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi kh√¥ng
    if os.path.isabs(dest_path):
        # N·∫øu l√† ƒë∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi, s·ª≠ d·ª•ng nguy√™n ƒë∆∞·ªùng d·∫´n
        final_dest_path = dest_path
    else:
        # N·∫øu l√† ƒë∆∞·ªùng d·∫´n t∆∞∆°ng ƒë·ªëi, th√™m WATCH_DIR v√†o tr∆∞·ªõc
        final_dest_path = os.path.join(WATCH_DIR, dest_path)

    # Tr√°nh copy v√†o ch√≠nh n√≥
    if os.path.abspath(file_path) == os.path.abspath(final_dest_path):
        message = "‚ö†Ô∏è File ngu·ªìn v√† ƒë√≠ch gi·ªëng nhau, b·ªè qua"
        add_status_message(file_path, message, "error")
        print(f"{message}: {file_path}")
        return False

    try:
        # ƒê·∫£m b·∫£o th∆∞ m·ª•c ƒë√≠ch t·ªìn t·∫°i
        os.makedirs(os.path.dirname(final_dest_path), exist_ok=True)
        
        # T·∫°o b·∫£n sao t·∫°m th·ªùi c·ªßa file g·ªëc sau khi l√†m s·∫°ch
        temp_file = file_path + ".temp"
        shutil.copy2(file_path, temp_file)
        clean_file(temp_file)
        
        # Copy file ƒë√£ l√†m s·∫°ch ƒë·∫øn ƒë√≠ch
        shutil.copy2(temp_file, final_dest_path)
        
        # X√≥a file t·∫°m
        if os.path.exists(temp_file):
            os.remove(temp_file)
        
        # X√≥a l·ªánh kh·ªèi file g·ªëc
        remove_line(file_path, "//sync")
        remove_line(file_path, "#sync")
        
        # Th√™m th√¥ng b√°o v√†o file g·ªëc
        message = f"‚úÖ ƒê√£ ƒë·ªìng b·ªô ƒë·∫øn {final_dest_path}"
        add_status_message(file_path, message, "success")
        print(f"üìÅ {message}")
        
        # Log ho·∫°t ƒë·ªông th√†nh c√¥ng
        log_operation(file_path, "sync", "success", f"ƒê√£ ƒë·ªìng b·ªô ƒë·∫øn {final_dest_path}")
        return True
    except Exception as e:
        error_msg = f"L·ªói khi ƒë·ªìng b·ªô: {str(e)}"
        add_status_message(file_path, error_msg, "error")
        print(f"‚ö†Ô∏è {error_msg}")
        traceback.print_exc()
        
        # Log l·ªói
        log_operation(file_path, "sync", "error", error_msg)
        return False

def commit_changes(file_path, branch=None):
    """T·ª± ƒë·ªông commit v√† push"""
    try:
        # Th√™m th√¥ng b√°o ƒëang x·ª≠ l√Ω
        if branch:
            add_status_message(file_path, f"ƒêang commit l√™n nh√°nh '{branch}'...", "info")
        else:
            add_status_message(file_path, "ƒêang th·ª±c hi·ªán commit...", "info")
        
        repo = git.Repo(WATCH_DIR)
        
        # Ki·ªÉm tra tr·∫°ng th√°i git
        if not repo.is_dirty() and len(repo.untracked_files) == 0:
            message = "Kh√¥ng c√≥ thay ƒë·ªïi ƒë·ªÉ commit"
            add_status_message(file_path, message, "info")
            print(f"‚ÑπÔ∏è {message}")
            return
        
        # L∆∞u branch hi·ªán t·∫°i ƒë·ªÉ c√≥ th·ªÉ chuy·ªÉn tr·ªü l·∫°i sau n√†y
        current_branch = repo.active_branch.name
        
        # Chuy·ªÉn sang branch m·ªõi n·∫øu ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
        if branch and branch != current_branch:
            try:
                # Ki·ªÉm tra xem nh√°nh ƒë√£ t·ªìn t·∫°i hay ch∆∞a
                branch_exists = branch in [b.name for b in repo.branches]
                
                if not branch_exists:
                    # T·∫°o nh√°nh m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i
                    repo.git.branch(branch)
                    message = f"‚úÖ ƒê√£ t·∫°o nh√°nh m·ªõi '{branch}'"
                    print(message)
                
                # Chuy·ªÉn sang nh√°nh m·ªõi
                repo.git.checkout(branch)
                message = f"‚úÖ ƒê√£ chuy·ªÉn sang nh√°nh '{branch}'"
                print(message)
                
            except Exception as e:
                error_msg = f"L·ªói khi chuy·ªÉn nh√°nh sang '{branch}': {str(e)}"
                add_status_message(file_path, error_msg, "error")
                print(f"‚ö†Ô∏è {error_msg}")
                return
        
        # Th·ª±c hi·ªán add v√† commit
        repo.git.add(A=True)  # Th√™m t·∫•t c·∫£ file
        commit_msg = get_commit_message()
        commit = repo.index.commit(commit_msg)
        
        # L·∫•y th√¥ng tin branch hi·ªán t·∫°i
        branch_name = repo.active_branch.name
        
        # Push l√™n remote
        try:
            origin = repo.remote(name='origin')
            push_info = origin.push(refspec=f"{branch_name}:{branch_name}")
            
            # Ki·ªÉm tra k·∫øt qu·∫£ push
            if hasattr(push_info[0], 'flags') and push_info[0].flags & push_info[0].ERROR:
                raise Exception(f"Push th·∫•t b·∫°i: {push_info[0].summary}")
                
            # N·∫øu th√†nh c√¥ng
            message = f"‚úÖ ƒê√£ commit v√† push l√™n branch '{branch_name}'\n‚è±Ô∏è {commit_msg}\nüìù SHA: {commit.hexsha[:7]}"
            add_status_message(file_path, message, "success")
            print(f"‚úÖ {message}")
            
            # Log ho·∫°t ƒë·ªông th√†nh c√¥ng
            log_operation(file_path, "commit", "success", 
                          f"Commit '{commit_msg}' l√™n branch '{branch_name}', SHA: {commit.hexsha[:7]}")
            
        except Exception as e:
            # N·∫øu push th·∫•t b·∫°i nh∆∞ng commit th√†nh c√¥ng
            error_msg = f"Commit th√†nh c√¥ng nh∆∞ng push th·∫•t b·∫°i: {str(e)}"
            add_status_message(file_path, error_msg, "error")
            print(f"‚ö†Ô∏è {error_msg}")
            
            # Log l·ªói
            log_operation(file_path, "push", "error", error_msg)
            
        # Tr·ªü l·∫°i nh√°nh ban ƒë·∫ßu n·∫øu ƒë√£ thay ƒë·ªïi
        if branch and branch != current_branch:
            try:
                repo.git.checkout(current_branch)
                print(f"‚úÖ ƒê√£ tr·ªü l·∫°i nh√°nh '{current_branch}'")
            except Exception as e:
                print(f"‚ö†Ô∏è L·ªói khi tr·ªü l·∫°i nh√°nh '{current_branch}': {str(e)}")
        
    except Exception as e:
        error_msg = f"L·ªói khi commit: {str(e)}"
        add_status_message(file_path, error_msg, "error")
        print(f"‚ö†Ô∏è {error_msg}")
        traceback.print_exc()
        
        # Log l·ªói
        log_operation(file_path, "commit", "error", error_msg)

def show_status(file_path):
    """Hi·ªÉn th·ªã tr·∫°ng th√°i ƒë·ªìng b·ªô c·ªßa file"""
    try:
        dest_path = read_first_comment(file_path)
        if not dest_path:
            message = "‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y ƒë∆∞·ªùng d·∫´n ƒë√≠ch trong file"
            add_status_message(file_path, message, "error")
            return
            
        # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n ƒë√≠ch ƒë·∫ßy ƒë·ªß
        if os.path.isabs(dest_path):
            final_dest_path = dest_path
        else:
            final_dest_path = os.path.join(WATCH_DIR, dest_path)
            
        # Ki·ªÉm tra xem file ƒë√≠ch c√≥ t·ªìn t·∫°i kh√¥ng
        if not os.path.exists(final_dest_path):
            message = f"‚ö†Ô∏è File ƒë√≠ch kh√¥ng t·ªìn t·∫°i: {final_dest_path}"
            add_status_message(file_path, message, "error")
            return
            
        # So s√°nh th·ªùi gian s·ª≠a ƒë·ªïi
        src_mtime = os.path.getmtime(file_path)
        dest_mtime = os.path.getmtime(final_dest_path)
        
        src_time = datetime.datetime.fromtimestamp(src_mtime).strftime('%H:%M:%S %d/%m/%Y')
        dest_time = datetime.datetime.fromtimestamp(dest_mtime).strftime('%H:%M:%S %d/%m/%Y')
        
        if src_mtime > dest_mtime:
            message = f"‚ö†Ô∏è File ngu·ªìn m·ªõi h∆°n file ƒë√≠ch\nüìù Ngu·ªìn: {src_time}\nüìù ƒê√≠ch: {dest_time}"
            add_status_message(file_path, message, "info")
        elif src_mtime < dest_mtime:
            message = f"‚ö†Ô∏è File ƒë√≠ch m·ªõi h∆°n file ngu·ªìn\nüìù Ngu·ªìn: {src_time}\nüìù ƒê√≠ch: {dest_time}"
            add_status_message(file_path, message, "info")
        else:
            message = f"‚úÖ File ngu·ªìn v√† ƒë√≠ch ƒë·ªìng b·ªô\nüìù C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: {src_time}"
            add_status_message(file_path, message, "success")
            
        # Log ho·∫°t ƒë·ªông
        log_operation(file_path, "status_check", "info", message)
        
        # X√≥a l·ªánh
        remove_line(file_path, "//status")
        remove_line(file_path, "#status")
        
    except Exception as e:
        error_msg = f"L·ªói khi ki·ªÉm tra tr·∫°ng th√°i: {str(e)}"
        add_status_message(file_path, error_msg, "error")
        print(f"‚ö†Ô∏è {error_msg}")
        traceback.print_exc()
        
        # Log l·ªói
        log_operation(file_path, "status_check", "error", error_msg)
        
        # X√≥a l·ªánh
        remove_line(file_path, "//status")
        remove_line(file_path, "#status")

def process_command(file_path, content):
    """X·ª≠ l√Ω c√°c l·ªánh trong file"""
    try:
        # T√¨m ki·∫øm v√† x·ª≠ l√Ω c√°c l·ªánh ƒë·ªìng b·ªô
        if "//sync" in content or "#sync" in content:
            sync_file(file_path)
            return True
            
        # T√¨m ki·∫øm l·ªánh commit n√¢ng cao
        commit_match = re.search(r"(?://|#)commit\s*([a-zA-Z0-9_\-\/]*)?\.", content)
        if commit_match:
            branch = commit_match.group(1).strip() if commit_match.group(1) else None
            commit_changes(file_path, branch)
            # X√≥a l·ªánh commit
            if branch:
                pattern = f"//commit {branch}." if "//commit" in content else f"#commit {branch}."
                remove_line(file_path, pattern)
            else:
                remove_line(file_path, "//commit.")
                remove_line(file_path, "#commit.")
            return True
            
        # T√¨m ki·∫øm l·ªánh commit c≈© (gi·ªØ l·∫°i ƒë·ªÉ t∆∞∆°ng th√≠ch)
        if "//commit now" in content or "#commit now" in content:
            commit_changes(file_path)
            remove_line(file_path, "//commit now")
            remove_line(file_path, "#commit now")
            return True
            
        # T√¨m ki·∫øm l·ªánh status
        if "//status" in content or "#status" in content:
            show_status(file_path)
            return True
            
        return False
    except Exception as e:
        error_msg = f"L·ªói khi x·ª≠ l√Ω l·ªánh: {str(e)}"
        add_status_message(file_path, error_msg, "error")
        print(f"‚ö†Ô∏è {error_msg}")
        traceback.print_exc()
        return False

class FileEventHandler(FileSystemEventHandler):
    """X·ª≠ l√Ω s·ª± ki·ªán khi file thay ƒë·ªïi"""
    def on_modified(self, event):
        if event.is_directory:
            return
            
        file_path = event.src_path
        current_time = time.time()
        
        # B·ªè qua c√°c file t·∫°m th·ªùi, ·∫©n, ho·∫∑c file log c·ªßa ch√≠nh ch√∫ng ta
        if (file_path.endswith(".swp") or file_path.endswith("~") or 
            file_path.endswith(".temp") or os.path.basename(file_path).startswith(".") or 
            file_path == LOG_FILE):
            return
            
        # Ki·ªÉm tra th·ªùi gian cooldown ƒë·ªÉ tr√°nh x·ª≠ l√Ω nhi·ªÅu l·∫ßn
        if file_path in last_modified_time:
            if current_time - last_modified_time[file_path] < COOLDOWN_PERIOD:
                return  # B·ªè qua n·∫øu file v·ª´a ƒë∆∞·ª£c x·ª≠ l√Ω
        
        last_modified_time[file_path] = current_time
        
        try:
            with open(file_path, "r", encoding="utf-8") as f:
                content = f.read()
                
            # X·ª≠ l√Ω t·∫•t c·∫£ c√°c l·ªánh
            process_command(file_path, content)
                
        except UnicodeDecodeError:
            # Th·ª≠ v·ªõi encoding kh√°c
            try:
                with open(file_path, "r", encoding="latin-1") as f:
                    content = f.read()
                    
                # X·ª≠ l√Ω t·∫•t c·∫£ c√°c l·ªánh v·ªõi encoding kh√°c
                process_command(file_path, content)
                    
            except Exception as e:
                #print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω file {file_path} v·ªõi encoding kh√°c: {e}")
                pass
        except Exception as e:
            # print(f"‚ö†Ô∏è L·ªói x·ª≠ l√Ω file {file_path}: {e}")
            pass

if __name__ == "__main__":
    print("üöÄ Auto-sync running... (Ctrl+C ƒë·ªÉ d·ª´ng)")
    print(f"üìÇ ƒêang theo d√µi th∆∞ m·ª•c: {WATCH_DIR}")
    print(f"üìù Log file: {LOG_FILE}")
    print("üìã L·ªánh h·ªó tr·ª£:")
    print("   - //sync: ƒê·ªìng b·ªô file ƒë·∫øn ƒë√≠ch")
    print("   - //commit.: Commit l√™n nh√°nh hi·ªán t·∫°i")
    print("   - //commit t√™n_nh√°nh.: Commit l√™n nh√°nh ch·ªâ ƒë·ªãnh")
    print("   - //status: Ki·ªÉm tra tr·∫°ng th√°i ƒë·ªìng b·ªô")
    
    event_handler = FileEventHandler()
    observer = Observer()
    observer.schedule(event_handler, WATCH_DIR, recursive=True)
    observer.start()

    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        observer.stop()
        print("\nüõë ƒê√£ d·ª´ng ch∆∞∆°ng tr√¨nh")
    observer.join()














/* AUTO-SYNC STATUS START */
/* ‚ÑπÔ∏è ƒêang th·ª±c hi·ªán commit... */
/* ‚è±Ô∏è Th·ªùi gian: 02:45:57 18/03/2025 */
/* AUTO-SYNC STATUS END */
